\input texinfo
@c %**start of header
@setfilename FAQ-vegan.info
@settitle vegan FAQ
@setchapternewpage on
@set FAQ_YEAR 2006
@set FAQ_VERSION 0.0-1
@c %**end of header

@copying
This work is licensed under the Creative Commons Attribution 2.5
License. To view a copy of this license, visit
@url{http://creativecommons.org/licenses/by/2.5/} or send a letter to
Creative Commons, 543 Howard Street, 5th Floor, San Francisco,
California, 94105, USA.

Copyright @copyright{} 2006 Jari Oksanen
@end copying

@dircategory Programming
@direntry
* R vegan FAQ: (FAQ-vegan).             FAQ for R package vegan.
@end direntry

@finalout

@titlepage
@title vegan @acronym{FAQ}
@subtitle Frequenlty Asked Questions on R package vegan
@subtitle Version @value{FAQ_VERSION}
@author Jari Oksanen

@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnothtml
@contents
@end ifnothtml


@ifnottex
@node Top, Introduction, (dir), (dir)
@top vegan FAQ
@insertcopying
@end ifnottex


@menu
* Introduction::                
* Ordination::                  
* Other analysis methods ::     
@end menu

@node Introduction, Ordination, Top, Top
@chapter Introduction

@menu
* What is vegan?::              
* What is R?::                  
* How to obtain vegan and R?::  
* What other documentation is available for vegan?::  
* Version numbering in vegan::  
* How to build vegan from sources?::  
* Can I contribute to vegan?::  
@end menu

@node What is vegan?, What is R?, Introduction, Introduction
@section What is vegan?

Vegan is an R package for community ecologists. It contains most
multivariate analysis needed in analysing ecological communities, and
tools for diversity analysis, and other potentially useful functions.
Vegan is not self-contained but it must be run under R statistical
environment, and it also depends on many other R packages.

@node What is R?, How to obtain vegan and R?, What is vegan?, Introduction
@section What is R?

R is a system for statistical computation and graphics.  It consists of
a language plus a run-time environment with graphics, a debugger, access
to certain system functions, and the ability to run programs stored in
script files.

@node How to obtain vegan and R?, What other documentation is available for vegan?, What is R?, Introduction
@section How to obtain vegan and R?

Both R and latest release version of vegan can be obtained through
@url{http://cran.r-project.org,,CRAN}. Unstable development version of
vegan can be obtained through my personal homepage
@url{http://cc.oulu.fi/~jarioksa/softhelp/vegan.html,,}

@node What other documentation is available for vegan?, Version numbering in vegan, How to obtain vegan and R?, Introduction
@section What other documentation is available for vegan?

Vegan is a fully documented R package with standard help pages.  These
are the most authorative sources of documentation.  Vegan package ships
with other documents which can be read with @code{vegandocs} command
(documented in the vegan help).  The documents included in the vegan
package are 
@itemize
@item 
Vegan ChangeLog.
@item 
Discussion on design decission in vegan
@item
Description of variance partition procedures in function @code{varpart}.
@end itemize

A tutorial into vegan is available through my web pages
@url{http://cc.oulu.fi/~jarioksa/softhelp/vegan.html}.

@node Version numbering in vegan, How to build vegan from sources?, What other documentation is available for vegan?, Introduction
@section Version numbering in vegan

Vegan version numbers are of type x.y-z, where number y is even for
stable release versions at @url{http://cran.r-project.org,,CRAN} and
odd for unstable release versions at
@url{http://cc.oulu.fi/~jarioksa/softhelp/vegan.html,,my personal homepage}.

@node How to build vegan from sources?, Can I contribute to vegan?, Version numbering in vegan, Introduction
@section How to build vegan from sources?

Vegan is a standard R package, and can be built like instructed in R
documentation.  Vegan contains source files in C and @acronym{FORTRAN},
and you need appropriate compilers (which may need more work in Windows
and MacOS X). 

@node Can I contribute to vegan?,  , How to build vegan from sources?, Introduction
@section Can I contribute to vegan?

Vegan is dependent on user contribution.  All feedback is welcome.  If
you have problem with vegan, it may be as simple as incomplete
documentation, and I'll do my best to improve the documents.  Bug
reports also are very welcome.  I typically use only a subset of vegan
functions, and often in similar ways, and therefore I don't notice
obvious bugs that should be corrected.

Feature requests also are welcome, but they are not necessarily
fulfilled.  A new feature will be added if it is easy to do and it looks
useful to me or in general.  

Contributed code and functions is welcome and more certain to be
included than mere requests.  However, not all functions will be added,
but I must judge them to be suitable for vegan.  I also audit the code,
and  typically I edit the code in vegan style for easier maintenance.
All included contributions will be credited.  You can easily see that
many vegan functions were contributed by other people, and they are
listed as authors in the documentation. 

@node Ordination, Other analysis methods , Introduction, Top
@chapter Ordination

@menu
* Can you analyse binary or cover class data?::  
* Zero dissimilarities in isoMDS::  
* Variance explained by ordination axes::  
* Class variables::             
* What are aliased variables and how to see them?::  
* Plotting aliased variables::  
@end menu

@node Can you analyse binary or cover class data?, Zero dissimilarities in isoMDS, Ordination, Ordination
@section Can you analyse binary or cover class data?

Yes. Most vegan methods can handle binary data or cover abundance data.
Most statistical tests are based on permutation, and do not make
distributional assumptions.  There are some methods (mainly in diversity
analysis) that need count data.  These methods check that input data are
integers, but they may be fooled by cover class data.

@node Zero dissimilarities in isoMDS, Variance explained by ordination axes, Can you analyse binary or cover class data?, Ordination
@section Zero dissimilarities in isoMDS

You can use argument @code{zerodist = "add"} in @code{metaMDS} or
@code{metaMDSdist} to handle zero dissimilarities.  With this argument,
zero dissimilarities are replace with a small above zero value, and they
can be handled in @code{isoMDS}.

@node Variance explained by ordination axes, Class variables, Zero dissimilarities in isoMDS, Ordination
@section Variance explained by ordination axes.

In genaral, vegan does not directly give any statistics on the
``variance explained'' by ordination axes or by the constrained axes.
This is a design decision: I think this information is normally useless
and often misleading.  In community ordination, the goal typically is
not to explain the variance, but to find the ``gradients'' or main
trends in the data.  The ``total variation'' often is meaningless, and
all proportions of meaningless value also are meaningless.  Often a
better solution explains a smaller part of ``total variation''.  For
instance, in unstandardized principal components analysis most of the
variance is generated by a small number of most abundant species, and
they are easy to ``explain'' because data really are not very
multivariate.  If you standardize your data, all species are equally
important.  The first axes explains much less of the ``total
variation'', but now they explain all species equally, and results
typically are much more useful for the whole community.  Correspondence
analysis uses another measure of variation (which is not variance), and
again it typically explains a ``smaller proportion'' with a better
result.  Detrended correspondence analysis and nonmetric
multidimensional scaling even do not try to ``explain'' the variation,
but use other criteria.  All methods are inconmesurable, and it is
impossible to compare methods using ``explanation of variation''.

If you still want to get ``explanation of variation'' (or a deranged
editor requests that from you), it is possible to get this information
for some methods:
@itemize
@item Eigenvector methods:
Functions @code{rda}, @code{cca} and @code{capscale} give the variation
of conditional (partialled), constrained (canonical) and residual
components, but you must calculate the proportions by hand. The
@code{summary} gives the contributions of the axes. 
Function @code{goodness} gives the same statistics for individual
species or sites (species are unavailable with @code{capscale}). In
addtion, there is a special function 
@code{varpart} for unbiased partitoning of variance between upto four
separate components in redundancy analysis.

@item Detrended correspondence analysis (function @code{decorana}).
The total amount of variation is unknown and undefined in detrended
correspondence analysis, and therefore proportions from total also are
unknown and undefined.  @acronym{DCA} is not a method for
decomposition of variation, and therefore these proportions would not
make sense either. 

@item Nonmetric multidimensional scaling. 
@acronym{NMDS} is a method for nonlinear mapping, and the concept of
of variation explained does not make sense.  However, 1 - stress
transforms nonlinear stress into quantity analogous to squared
correlation cofficient.  Function @code{stressplot} displays the
nonlinear fit and gives this statistic.

@end itemize

@node Class variables, What are aliased variables and how to see them?, Variance explained by ordination axes, Ordination
@section Class variables

You should define a class variable as R @code{factor}, and vegan will
automatically handle them with formula interface.  You also can define
constrained ordination without formula interface, but then you must
code your class variables by hand.

R (and vegan) knows both unordered and ordered factors.  Unordered
factors are internally coded as dummy variables, but one redundant
level is removed or aliased.  With default contrasts, the removed
level is the first one.  Ordered factors are expressed as polynomial
contrasts. Both of these contrasts explained in standard R
documentation. 

@node What are aliased variables and how to see them?, Plotting aliased variables, Class variables, Ordination
@section What are aliased variables and how to see them?

Aliased variable has no information because it can be expressed with
the help of other variables.  Such variables are automatically removed
in constrained ordination in vegan.  The aliasd variables can be
redundant levels of factors or whole variables.

Vegan function @code{alias} gives the defining equations for aliased
variables. 

@node Plotting aliased variables,  , What are aliased variables and how to see them?, Ordination
@section Plotting aliased variables

You can fit vectors or class centroids for aliased variables using
@code{envfit} function.  The @code{envfit} function uses weighted
fitting, and the fitted vectors are identical to the vectors in
correspondence analysis.

@node Other analysis methods ,  , Ordination, Top
@chapter Other analysis methods

@menu
* Is there TWINSPAN?::          
@end menu

@node Is there TWINSPAN?,  , Other analysis methods , Other analysis methods
@section Is there TWINSPAN

No.  It may be possible to port @acronym{TWINSPAN} to vegan, but it is
not among my top priorities.  If anybody wants to try porting,  I will
be happy to help.

@bye
